<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2012-09-09T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Running Rails on Ruby or JRuby - A Performance Comparison</title>
    <link rel="alternate" href="/2012/09/09/rails_on_ruby_jruby_a_performance_comparison.html"/>
    <id>/2012/09/09/rails_on_ruby_jruby_a_performance_comparison.html</id>
    <published>2012-09-09T00:00:00Z</published>
    <updated>2012-09-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I have been a JRuby fanboy for a while now, in the last few weeks I also saw some really interesting RailsCasts on multi-threading Rails applications and JRuby which piqued me to do some ad-hoc experimentation. I recommend everyone to watch these three episodes -&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I have been a JRuby fanboy for a while now, in the last few weeks I also saw some really interesting RailsCasts on multi-threading Rails applications and JRuby which piqued me to do some ad-hoc experimentation. I recommend everyone to watch these three episodes -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://railscasts.com/episodes/365-thread-safety'&gt;http://railscasts.com/episodes/365-thread-safety&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://railscasts.com/episodes/376-jruby-basics'&gt;http://railscasts.com/episodes/376-jruby-basics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://railscasts.com/episodes/377-trinidad'&gt;http://railscasts.com/episodes/377-trinidad&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I am a sucker for performance. I love making performance improvements on applications. So I thought let me run some tests on a simple Rails application on my personal laptop (i7, 8 GB RAM, SSD) and see how well the Ruby implementations and their commonly used servers fair. I will use MRI 1.9.3, JRuby 1.7.0.preview2 and the latest app servers for this experiment.&lt;/p&gt;

&lt;p&gt;These tests need to be taken with a pinch of salt as I am no authority in perfomance testing but still the results are quite interesting.&lt;/p&gt;

&lt;p&gt;First, we need to setup a Rails app which can be used with both Ruby and JRuby. My Gemfile looks like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;#39;https://rubygems.org&amp;#39;

gem &amp;#39;rails&amp;#39;, &amp;#39;3.2.8&amp;#39;
gem &amp;#39;warbler&amp;#39;

platform :jruby do
  gem &amp;#39;activerecord-jdbcpostgresql-adapter&amp;#39;
  gem &amp;#39;jruby-openssl&amp;#39;
  gem &amp;#39;puma&amp;#39;
  gem &amp;#39;trinidad&amp;#39;
  gem &amp;#39;therubyrhino&amp;#39;, group: :assets
end

platform :ruby do
  gem &amp;#39;pg&amp;#39;
  gem &amp;#39;unicorn&amp;#39;
end

# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem &amp;#39;sass-rails&amp;#39;,   &amp;#39;~&amp;gt; 3.2.3&amp;#39;
  gem &amp;#39;coffee-rails&amp;#39;, &amp;#39;~&amp;gt; 3.2.1&amp;#39;
  gem &amp;#39;uglifier&amp;#39;, &amp;#39;&amp;gt;= 1.0.3&amp;#39;
end

gem &amp;#39;jquery-rails&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing out of the ordinary here, only thing is that the gems will be loaded according to the Ruby implementation.&lt;/p&gt;

&lt;p&gt;I also scaffolded a generic User model and added a few records to my database. Pointed the &amp;#8216;root&amp;#8217; of my application to the /users/index page so that the DB is hit everytime someone opens the homepage of the application. I will also use &amp;#8220;ab&amp;#8221; (apache benchmark) as my testing tool, I also tried this with JMeter and there was not much difference. My command is -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab -n 100 -c 10 http://localhost:8080/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means my app&amp;#8217;s homepage will be hit by 100 requests with 10 concurrent requests at a time, decent enough for performance testing a small app.&lt;/p&gt;

&lt;p&gt;Now lets start the experiment. We will run the experiment on the server in 2 modes, one by not allowing concurrency and the other by allowing concurrency. See tenderlove&amp;#8217;s awesome post to understand this more - &lt;a href='http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html'&gt;http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html&lt;/a&gt;. This is done by commenting / uncommenting this line in production.rb -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.threadsafe!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will also run the &amp;#8220;ab&amp;#8221; command above a few times so that cache etc is warmed. The results you see below are always for the 5th or 6th run.&lt;/p&gt;

&lt;p&gt;Also, we will precompile our assets and serve them from the app server only. We will run the tests in production mode. I have also increaded the DB pool size to 15 so that no bottleneck is created there.&lt;/p&gt;

&lt;p&gt;Finally, we kick off our experiment with MRI 1.9.3 and Unicorn, 3 workers enabled and concurrency off, lets see the results -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RAILS_ENV=production bundle exec unicorn -c config/unicorn.rb

Requests per second:    549.31 [#/sec] (mean)
Time per request:       18.205 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets us allow concurrency (uncomment the &amp;#8220;config.threadsafe!&amp;#8221; line) and re-run the tests -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    525.78 [#/sec] (mean)
Time per request:       19.019 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not much of a difference. This is because MRI uses a GIL and there is no thread level concurrency in MRI. Also reducing the no of workers reduces the performance drastically, if I use 1 worker -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    109.46 [#/sec] (mean)
Time per request:       91.360 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s switch over to JRuby now and use &lt;a href='http://puma.io'&gt;puma&lt;/a&gt; as the server, with these JVM options -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export JRUBY_OPTS=&amp;quot;-J-XX:ReservedCodeCacheSize=100m -J-Xmn512m -J-Xms2048m -J-Xmx2048m -J-server&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Server can be started by -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RAILS_ENV=production jruby -S bundle exec puma -p 8080&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Results with concurrency off -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    72.37 [#/sec] (mean)
Time per request:       138.184 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is much much slower than Unicorn.&lt;/p&gt;

&lt;p&gt;Lets enable concurrency and retest -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    451.77 [#/sec] (mean)
Time per request:       22.135 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we see a huge performance boost, we are getting similar results as Unicorn even though we are running just one server process as opposed to Unicorn&amp;#8217;s three.&lt;/p&gt;

&lt;p&gt;Lets try the same tests with &lt;a href='http://thinkincode.net/trinidad/'&gt;Trinidad&lt;/a&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RAILS_ENV=production jruby -S bundle exec trinidad -p 8080&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Results with concurrency off -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    287.45 [#/sec] (mean)
Time per request:       34.788 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a bit slow, lets enable concurrency and retest -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    391.74 [#/sec] (mean)
Time per request:       25.527 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see an improvment now. Although, Puma is a tad faster (ignorable).&lt;/p&gt;

&lt;p&gt;Lastly with concurrency enabled, we will use the warbler gem to generate a war file and deploy it on standard tomcat.&lt;/p&gt;

&lt;p&gt;The results here are startling -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    4268.76 [#/sec] (mean)
Time per request:       2.343 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think we are talking Java level performance here. I don&amp;#8217;t know why there is such a huge difference between Trinidad (which is Tomcat based) and standard Tomcat but it may be due to Trinidad being rack compliant and Tomcat having no such restrictions.&lt;/p&gt;

&lt;p&gt;Anyways, here is a summary -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unicorn is fast and performance improves as the number of workers are increased (no surprise!!).&lt;/li&gt;

&lt;li&gt;There is no effect of enabling concurrency on Unicorn as MRI uses GIL (Global Interpreter Lock).&lt;/li&gt;

&lt;li&gt;When using Unicorn you don&amp;#8217;t have to worry about multithreading.&lt;/li&gt;

&lt;li&gt;Puma is fast but only when concurrency is enabled.&lt;/li&gt;

&lt;li&gt;Trinidad is almost as fast as Puma.&lt;/li&gt;

&lt;li&gt;On JRuby servers the response time improves steadily as the server is hit due to JVM optimizations kicking in.&lt;/li&gt;

&lt;li&gt;With concurrency enabled on Puma / Trinidad watch out for thread safety.&lt;/li&gt;

&lt;li&gt;If you are looking for pure speed use warbler and Tomcat but you have moved out of the &amp;#8220;rack&amp;#8221; compliant world then.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, with JVM / JRuby / multi-threading, there is big advantage of running jobs is background threads without relying on external processes.&lt;/p&gt;

&lt;p&gt;However, with multi-threading enabled thread safety may be hard to get right. If you have a simple application and you design the application with concurrency in mind (immutable classes, thread safe libraries) then go ahead and use JRuby with Puma / Trinidad / Torquebox. Learn more from a great post here -&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/jruby/jruby/wiki/Concurrency-in-jruby'&gt;https://github.com/jruby/jruby/wiki/Concurrency-in-jruby&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Deploying Java applications with Capistrano</title>
    <link rel="alternate" href="/2012/09/01/deploying_java_apps_with_capistrano.html"/>
    <id>/2012/09/01/deploying_java_apps_with_capistrano.html</id>
    <published>2012-09-01T00:00:00Z</published>
    <updated>2012-09-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;The advantage of learning a few programming languages is that you apply one&amp;#8217;s paradigms to the other. When I was a Java programmer I never gave much thought to deployment. Maven would build a war file, which would be copied to the application server through a shell script or even via the IDE. For remote deployments we would just do the same from the build server via scp. I always found the Maven &amp;#8220;Cargo&amp;#8221; plugin too complicated so let just skip that for now.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;The advantage of learning a few programming languages is that you apply one&amp;#8217;s paradigms to the other. When I was a Java programmer I never gave much thought to deployment. Maven would build a war file, which would be copied to the application server through a shell script or even via the IDE. For remote deployments we would just do the same from the build server via scp. I always found the Maven &amp;#8220;Cargo&amp;#8221; plugin too complicated so let just skip that for now.&lt;/p&gt;

&lt;p&gt;Then I came into the Ruby world and learned (a bit) about Capistrano and was absolutely fascinated by it. It did so much so easily for deployment that using anything else seems pre-historic.&lt;/p&gt;

&lt;p&gt;So I started suggesting my Java friends to use Capistrano. This post is my first attempt at deploying a Java EE6 project with Capistrano.&lt;/p&gt;

&lt;p&gt;Lets start by creating a Java EE6 project from Maven (or whichever way you like). To keep our lives simple and stay withing the JVM world we will use JRuby (1.7.0 preview 2). If you already have JRuby setup run a &amp;#8220;gem update&amp;#8221; to avoid any pain.&lt;/p&gt;

&lt;p&gt;Now just install the Capistrano gem in JRuby by running -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install capistrano&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in the root directory of our JavaEE project run -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;capify .&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Capistrano will now create some files with some default entries.&lt;/p&gt;

&lt;p&gt;Now, we will also use the Tomcat Manager for deployment so read up a bit &lt;a href='http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html'&gt;here&lt;/a&gt; and setup your manager in $TOMCAT_HOME/conf/tomcat-users.xml. Make sure you give the manager &lt;strong&gt;&amp;#8220;manager-script&amp;#8221;&lt;/strong&gt; role so that we can do automated command line deployments through the manager.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll start of by using Capistrano for local deployment, I know that can be easily done through an IDE but we&amp;#8217;ll start off with this and for doing remote deployments it will be just a matter of changing the hostname and paths (and SSH setup of course).&lt;/p&gt;

&lt;p&gt;So lets look at the capfile we update in $your-javaee-project/config/deploy.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set :application, &amp;quot;jdeployer&amp;quot;
set :scm, &amp;quot;git&amp;quot;
set :repository, &amp;quot;git@github.com:rocky-jaiswal/#{application}.git&amp;quot;
set :branch, &amp;quot;master&amp;quot;

default_run_options[:pty] = true
ssh_options[:forward_agent] = true #Line 7

task :local do
    roles.clear
    server &amp;quot;localhost&amp;quot;, :app #Line 11
    set :user, &amp;quot;rockyj&amp;quot; 
    set :java_home, &amp;quot;/home/#{user}/jdk1.7.0_05&amp;quot; #Line 13
    set :tomcat_home, &amp;quot;/home/#{user}/Apps/apache-tomcat-7.0.29&amp;quot;
    set :tomcat_manager, &amp;quot;manager&amp;quot;
    set :tomcat_manager_password, &amp;quot;manager&amp;quot;
    set :maven_home, &amp;quot;/home/#{user}/Apps/apache-maven-3.0.4&amp;quot;
    set :deploy_to, &amp;quot;/home/#{user}/tmp/#{application}&amp;quot; # Line 18
    set :use_sudo, false
    namespace :tomcat do
      task :deploy do
        puts &amp;quot;==================Building with Maven======================&amp;quot; #Line 22
        run &amp;quot;export JAVA_HOME=#{java_home} &amp;amp;&amp;amp; cd #{deploy_to}/current &amp;amp;&amp;amp; #{maven_home}/bin/mvn clean package&amp;quot;
        puts &amp;quot;==================Undeploy war======================&amp;quot;#Line 24
        run &amp;quot;curl --user #{tomcat_manager}:#{tomcat_manager_password} http://$CAPISTRANO:HOST$:8080/manager/text/undeploy?path=/#{application}&amp;quot;
        puts &amp;quot;==================Deploy war to Tomcat======================&amp;quot; #Line 26
        run &amp;quot;curl --upload-file #{deploy_to}/current/target/#{application}*.war --user #{tomcat_manager}:#{tomcat_manager_password} http://$CAPISTRANO:HOST$:8080/manager/text/deploy?path=/#{application}&amp;quot;
      end
    end
    after &amp;quot;deploy&amp;quot;, &amp;quot;tomcat:deploy&amp;quot; #Line 30
    after &amp;quot;tomcat:deploy&amp;quot;, &amp;quot;deploy:cleanup&amp;quot; # keep only the last 5 releases
end &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Line 1 - 7 : We are using github as our code repo and the first 7 lines are basic Capistrano setup (nothing much to talk about).&lt;/p&gt;

&lt;p&gt;Line 11 - 18 : Then we define a custom task / namespace to keep our experiment isolated. We set the Java, Tomcat and other paths to get the basic setup in place. We will also use Maven to build our app so we specify its path as well. We will build the app in a temporary folder so we set that path as well.&lt;/p&gt;

&lt;p&gt;Line 30 : The default Capistrano task is &amp;#8220;deploy&amp;#8221; which will take the updated version of code from git check it out in the specified directory. After the deploy command we will run our own custom commands through Capistrano&amp;#8217;s DSL.&lt;/p&gt;

&lt;p&gt;Line 22 - 23 : Now we start using Capistrano&amp;#8217;s DSL and run commands on remote servers via ssh. First we set the right JAVA_HOME and change the directory to where our code is. Then we build our project through Maven. Please note we need to run the commands in the same shell and that is why we do &amp;#8220;command a &amp;amp;&amp;amp; command b&amp;#8221;. We cannot specify commands in separate lines as Capistrano opens a new shell for each command when we run it with the &amp;#8220;run&amp;#8221; method call.&lt;/p&gt;

&lt;p&gt;Line 24 - 27 : Next using the Tomcat manager and curl (since Tomcat Manager works on HTTP), we undeploy the existing version of the application and finally deploy the Maven built new version. We use the &amp;#8220;$CAPISTRANO:HOST&amp;#8221; variable to avoid hardcoding and getting the hostname where Capistrano commands are being run.&lt;/p&gt;

&lt;p&gt;We will first test this on localhost, so make sure you have your local ssh server running. In Fedora I do -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service sshd start&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, make sure you have local SSH keys setup and your Tomcat is running with the manager properly configured. Now finally run this single command to deploy your Java application -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cap local deploy&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is it, since the build is made from github make sure you push your changes out before running this command to see your changes on the browser. This may seem a lot for a local deploy but now just change the &amp;#8220;:server&amp;#8221; hostname to deploy to a server remotely (ofcourse, you may need to change your Maven / JDK paths as well according to your remote server setup). After this you can now deploy a new &amp;#8220;war&amp;#8221; build to a remote server with a single command. You can also write your own custom tasks with Capistrano and sit back and enjoy painless deployments.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Accessing server data from a native Android app</title>
    <link rel="alternate" href="/2012/08/26/accessing_server_data_from_a_native_android_app.html"/>
    <id>/2012/08/26/accessing_server_data_from_a_native_android_app.html</id>
    <published>2012-08-26T00:00:00Z</published>
    <updated>2012-08-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;This was a quite relaxing weekend, there was heavy rain in the Delhi region so there was not much to do. So I picked up a Scala book and read a few chapters. Soon enough, my hands started itching to write some code. I wanted to build something in Scala but ended up experimenting on Android.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;This was a quite relaxing weekend, there was heavy rain in the Delhi region so there was not much to do. So I picked up a Scala book and read a few chapters. Soon enough, my hands started itching to write some code. I wanted to build something in Scala but ended up experimenting on Android.&lt;/p&gt;

&lt;p&gt;Back at work, I finished my first iPad optimized jQuery Mobile and Rails web application. I am mostly satisfied with the end result but somehow felt that a native app would have provided a better experience to the user. The question which arises is how to make a native app communicate with the server when most of the data needs to be fetched from the server itself.&lt;/p&gt;

&lt;p&gt;So to build on this idea, I started making an Android application that fetches JSON data from a Rails server. To express myself clearly I wanted data to be accessible from a mobile app and a web app, like shown below -&lt;/p&gt;

&lt;p&gt;&lt;img alt='Mobile' src='/images/mobby_mobile.png' /&gt; &lt;img alt='Mobile' src='/images/mobby_web.png' /&gt;&lt;/p&gt;

&lt;p&gt;The web app is a fully featured Mongoid enabled Rails application for which I have scaffoled a simple book model. I wanted the mobile version to also access the same data (in JSON format) and just display it in a Phonegapped native application. You can already see the end result in the images above. Lets look at the steps required to build this -&lt;/p&gt;

&lt;p&gt;The first and the biggest problem you are bound to face is -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XMLHttpRequest cannot load http://localhost:3000/books.json. Origin null is not allowed by Access-Control-Allow-Origin.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because the Android application is not running on the same server as the Rails application in fact it is not running on any server at all. Rails will interpret the incoming request and reject it as it assumes it is from a malicious source (remember CSRF).&lt;/p&gt;

&lt;p&gt;To solves this problem we have to use &lt;a href='http://en.wikipedia.org/wiki/JSONP'&gt;JSONP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To organize our mobile application&amp;#8217;s JavaScript code we will use Backbone.js. Here is how the code looks like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Mobby&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/jquery-1.7.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/cordova-2.0.0.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/underscore.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/backbone.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/bootstrap.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/plugins.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap-responsive.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/style.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;div class=&amp;quot;navbar navbar-fixed-top&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;navbar-inner&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
            &amp;lt;a class=&amp;quot;brand&amp;quot; href=&amp;quot;/&amp;quot;&amp;gt;Mobby&amp;lt;/a&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot; style=&amp;quot;padding-top: 50px&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Books&amp;lt;/p&amp;gt;
      &amp;lt;div id=&amp;quot;book&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; type=&amp;quot;button&amp;quot; id=&amp;quot;btnRefresh&amp;quot; style=&amp;quot;margin-top: 20px&amp;quot;&amp;gt;Refresh&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the JS code -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function(){

  var Book = Backbone.Model.extend({
  });

  var BookList = Backbone.Collection.extend({
    model : Book, 
    url: &amp;#39;http://10.0.2.2:3000/books.jsonp?callback=?&amp;#39;, //Line 9
    parse: function(response) {
      return response;
    }
  });

  var books = new BookList();
  books.fetch();

  var BookView = Backbone.View.extend({
    el : $(&amp;#39;#book&amp;#39;),
    render: function() {
      var bookList = &amp;#39;&amp;lt;ui&amp;gt;&amp;#39;;
      _.each(this.model.models, function(book){
        bookList = bookList + &amp;#39;&amp;lt;li&amp;gt;&amp;#39; + book.get(&amp;#39;title&amp;#39;) + &amp;#39;&amp;lt;\/li&amp;gt;&amp;#39;;
      });
      bookList = bookList + &amp;#39;&amp;lt;\/ul&amp;gt;&amp;#39;;
      $(this.el).html(bookList);
      return this;
    }
  });

  books.on(&amp;quot;reset&amp;quot;, function() {
    var view = new BookView({model: books});
    view.render();
  });

  $(&amp;quot;#btnRefresh&amp;quot;).click(function() {
    books.fetch();
  });

  // Wait for Cordova to load
  document.addEventListener(&amp;quot;deviceready&amp;quot;, onDeviceReady, false);

  // Cordova is loaded and it is now safe to make calls Cordova methods
  function onDeviceReady() {
  }

});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is standard Backbone stuff, see my &lt;a href='/2012/05/25/intro_to_backbone_jQuery.html'&gt;older&lt;/a&gt; post to get an introduction to Backbone.&lt;/p&gt;

&lt;p&gt;The important thing is on Line number 9. We are doing 2 things there, firstly using &lt;strong&gt;10.0.2.2&lt;/strong&gt; instead of &lt;strong&gt;localhost&lt;/strong&gt; beause that is how the emulator can access the host machine where the Rails server is running. Secondly, we are not doing a simple JSON request to the Rails server but doing a JSONP request.&lt;/p&gt;

&lt;p&gt;Now, on the Rails side to need to deal with this new type to request and also wrap JSON back in a callback. Doing so for every individual request can be a pain but fear not there is a Gem available for this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;#39;rack-jsonp-middleware&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the name suggests, this is a Rails middleware (consider it as a request filter if you are from the Java world) and to enable it we need to add this in application.rb -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.middleware.use Rack::JSONP&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our controller is untouched now -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# GET /books
# GET /books.json
def index
  @books = Book.all

  respond_to do |format|
    format.html # index.html.erb
    format.json { render json: @books }
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rest of the magic is all on Backbone&amp;#8217;s side. Now if we make a change on the web application and hit the &amp;#8220;Refesh&amp;#8221; button on the mobile application we will get the updated data on the mobile view.&lt;/p&gt;

&lt;p&gt;In my next blog (hopefully) I will cover editing of data on the mobile even when you are offline with eventual sync to the server and using &amp;#8220;Cross-origin Resource Sharing&amp;#8221; which is an essential security feature when accessing site data from multiple interfaces.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Why JavaScript is important</title>
    <link rel="alternate" href="/2012/08/18/why_javascript_is_important.html"/>
    <id>/2012/08/18/why_javascript_is_important.html</id>
    <published>2012-08-18T00:00:00Z</published>
    <updated>2012-08-18T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;In a couple of months I will be completing a decade professionally in the IT / ICT field. Its been a great journey and I have much to learn. I am happy that I have been able to stick to technology and my love for programming increases each day. I have also seen a lot of technologies come and go in these years, some have been surprisingly pleasantly and some have left a bad taste in the mouth.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;In a couple of months I will be completing a decade professionally in the IT / ICT field. Its been a great journey and I have much to learn. I am happy that I have been able to stick to technology and my love for programming increases each day. I have also seen a lot of technologies come and go in these years, some have been surprisingly pleasantly and some have left a bad taste in the mouth.&lt;/p&gt;

&lt;p&gt;Java was the first language that I really understood and appreciated. It&amp;#8217;s statically typed, complied to a bytecode and offers great performance second only to C. With Java I felt that there were hundreds of ways to tweak things, you could start threads from a thread pool, synchronize them with locks when are where you wished. But with this great power also came great repossibilty, one had to spend time to understand concurrency, thread safety and most of the times these important aspects were ignored. Java still is a great language and the JVM is still the place to go when you are looking for stability and performance.&lt;/p&gt;

&lt;p&gt;Then I learned Rails, this was the complete opposite of Java. Built on a dynamic, meta-programming-happy language - Ruby, it offered one and only one way to build app. This was a good thing and bad. Good because the design decisions Rails took were (and still are) great. RESTful MVC architecture with a great ORM, there is nothing better really. Rails is THE framework to go if you want to build modern websites quickly and efficiently. Of course, Ruby isn&amp;#8217;t the fastest langauge on the planet, but it is improving and JRuby will kick ass in near future.&lt;/p&gt;

&lt;p&gt;Then came node.js and changed the way we develop websites. node.js is fast and by fast I mean blazing fast. node.js doesn&amp;#8217;t have threads and uses JavaScript fully to create a event-driven and asynchronous architecture. I have heard stories of two clustered node.js servers handling traffic of large dot coms. There are a lot of articles on the web which can help you with node.js but I want to emphasise on the point why every developer worth his / her salt needs to learn JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rise of mobile -&lt;/strong&gt; Every site now built needs a mobile version. As a result a lot of web applications will use Responsive Design and push logic on the client side. The server, I believe, will become a mere provider of data. I think this approach is also a decent design paradigm. The complex calculations can be done on server of course and the client only needs the processed JSON from server for a dynamic display. As the code on the client side increases one needs a framework to manage it or live with sphagetti JavaScript code, which is a maintenance hell.&lt;/p&gt;

&lt;p&gt;To organize code on the client side we need frameworks like Backbone.js, Ember.js and Angular.js. These framework require solid knowledge of JavaScript so irrespective of the server side technology JavaScript knowledge is a must.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Push is the future -&lt;/strong&gt; Modern sites are using Push more and more. Which means the user does not have to refresh the page to fetch new data, the server can &amp;#8220;push&amp;#8221; the data to the client. This requires use of HTML5&amp;#8217;s websockets. Node.js and socket.io are the best suited technologies for this (both of course are written in JavaScript). A single node.js instance due to its event driven and ansynchronous nature can push data to multiple client easily. This would not scale on a comparitively slower frameworks like Rails. Clojure, Scala and Vert.ex make push possible but none of them have been proven themseles so far like node.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript is everywhere -&lt;/strong&gt; There is only one technology to work with when working on the browser i.e. JavaScript. We all know MVC is great, wouldn&amp;#8217;t it be awesome if as soon as I change my model on server the client is updated (without the user hitting refresh), this requires two things - push of data from server and manipulation of UI on browser. Well, JavaScript is THE ONLY language that can do this things. Meteor.js is already making this possible and there are other frameworks in line (all on JavaScript).&lt;/p&gt;

&lt;p&gt;Well that is why I am not wasting any time improving my JavaScript.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>The non-tangibles of Agile</title>
    <link rel="alternate" href="/2012/06/08/non_tangibles_of_agile.html"/>
    <id>/2012/06/08/non_tangibles_of_agile.html</id>
    <published>2012-06-08T00:00:00Z</published>
    <updated>2012-06-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;A lot of times I have been told that being Agile is all about attitude, a statement which I could not understand until a while back. I thought like in every process if you do X, Y, Z you become Agile. However lately I have realized that Agility is not just about burndown charts, having planning &amp;amp; retrospective meetings or doing you daily stand-ups.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;A lot of times I have been told that being Agile is all about attitude, a statement which I could not understand until a while back. I thought like in every process if you do X, Y, Z you become Agile. However lately I have realized that Agility is not just about burndown charts, having planning &amp;amp; retrospective meetings or doing you daily stand-ups.&lt;/p&gt;

&lt;p&gt;Being Agile is an actually an attitude, which may sound gibberish but in this post I will try and make some sense of the this &amp;#8220;attitude&amp;#8221; and try to make it more tangible. So if you are doing planning poker, burndown charts and all that jazz that is great but you should still item about these not so obvious things -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I talk a lot about trust in my blogs, but what is trust in professional life? In a Scrum project, you can ask yourselves the following questions -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you trust your developers to do the right thing every single time?&lt;/li&gt;

&lt;li&gt;Do you trust the estimates your developers are giving you?&lt;/li&gt;

&lt;li&gt;Do you trust the estimate of the developer even when you see him doing something not related to project?&lt;/li&gt;

&lt;li&gt;Do the developers trust the product owner that the backlog is sufficiently refined and prioritized?&lt;/li&gt;

&lt;li&gt;Do the developers trust that the Scrum Master is helping them?&lt;/li&gt;

&lt;li&gt;Do you trust the Product Owner that he has the larger plan and release date in his/her mind and every action takes you towards that release date?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trust takes a long time to build and breaks with one small action. The Scrum master, product owner and the developers need to really trust each other if Scrum has to succeed. For example the PO who doesn&amp;#8217;t trust the team&amp;#8217;s estimates will always think that the developers are slacking and keep pushing them to do more which will ultimately destroy the team morale and the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Courage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agile or Scrum does not fix a single problem. Yes, that is true! I will only highlight and identify some problems as quickly as you allow it to. One can do all the retros in the world but not have the courage to break the bad news or become the bad guy who bring the bad news. For example, the release backlog is no where near the state it should be or the developers don&amp;#8217;t have the tools they need, this will be easily identified in the sprint demo or retro but a lot of times people choose to postpone it or ignore talking about it let alone taking tough decisions like backlog pruning or reducing features. Courage can be in simple things like cancelling a phone call if the phone line is not clear, even do it multiple times forcing change to a better communication solution rather than sleep talking on calls.&lt;/p&gt;

&lt;p&gt;One should encourage the people who dissent, who shout and scream when they feel something is not right. Most of the times these people will help you avoid the proverbial iceberg.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Motivation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Motivation is a huge thing, and sometimes even Agile will not even identify it. Motivation degrades over time in situations where product is not released for a long time, there are constant changes within the sprint, there is mistrust among the team members or worse case some team members are disgruntled by organization policies or work culture. This situation demands extreme caution and monitoring that falls outside the Scrum purview. This can be indentified while going for team lunches, having one-on-ones with senior management or sometimes encouraging people to vent out their negative feelings. If any de-motivating factors are identified they should be fixed as soon as possible otherwise Scrum or no Scrum, the project is doomed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sense of Purpose and Sense of Achievement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The essence of a Sprint is to provide the team a sense of purpose and focus towards a limited set of problems or functionalites so that they can just think about a few tasks each and focus working on them. Developers work in a state of flow, they like it when things are organized and they know exactly what they have to do and what is the next item on their plate and nothing else. I have found programming to be a greater joy when I know exactly what is needed and the business value it will deliver. It makes me believe that my effort is helping someone and is driving the project forward. Same thing goes for a Sprint demo, if your spring demo is successful, celebrate a little, take the rest of the day off for open-source or gaming or whatever you fancy. Success and appreciation are highly addictive it will keep the team coming back for more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team Composition and Working Style&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Software projects are hard, not only technically but also in terms of team dynamics. Developers meet new team members, work with them for a while and the team is disbanded in six months or so. The whole process repeats itself time and again and is emotinally draining. The best performing teams I have met are the ones where every team member enjoy&amp;#8217;s the others&amp;#8217; company, cracks jokes, pulls pranks on each other and even enjoy the blaring music on their teammates&amp;#8217; laptop. This is very hard to achieve and I think the only one way to create such teams is being cautious during interviews. Try and identify the organization culture you want to develop, put it on your website, identify 5-6 culture related questions that you will ask in interviews. Build teams who can share a similar goal, for example a team where the PO is fine to release a half baked product as soon as possible and a team which wants to deliver to great product but with time will find it hard to work with each other. Agile may help you identify such symptoms but it may be too late to fix them by then.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this blog, feel free to comment on the non-tangibles of Agile which you feel are important but often ignored.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Blog moved to pure HTML5, CSS3</title>
    <link rel="alternate" href="/2012/05/28/moved_to_html.html"/>
    <id>/2012/05/28/moved_to_html.html</id>
    <published>2012-05-28T00:00:00Z</published>
    <updated>2012-05-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I have recently moved the blog to pure HTML5 and CSS3 (as you can see) from Wordpress. It gives me more control over the layout, look and feel and also helps me express my ideas freely.&lt;/p&gt;

&lt;p&gt;However, the migration is far from complete. Few of my older blog posts might not show up or look funny. I am working to fix this. I am really sorry for the inconvenice.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I have recently moved the blog to pure HTML5 and CSS3 (as you can see) from Wordpress. It gives me more control over the layout, look and feel and also helps me express my ideas freely.&lt;/p&gt;

&lt;p&gt;However, the migration is far from complete. Few of my older blog posts might not show up or look funny. I am working to fix this. I am really sorry for the inconvenice.&lt;/p&gt;

&lt;p&gt;Some of your great comments have also been lost, something which I am again trying to fix.&lt;/p&gt;

&lt;p&gt;On the flip side, the new blog is built with &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt;, Twitter bootstrap (with a resposive twist) and my own Nginx setup so it should feel much snappier and work on multiple devices. You can check out the source code on &lt;a href='https://github.com/rocky-jaiswal/my_blogs'&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for your patience.&lt;/p&gt;</content>
  </entry>
</feed>

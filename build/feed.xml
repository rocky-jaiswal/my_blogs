<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2012-09-22T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Rails on only JVM</title>
    <link rel="alternate" href="/2012/09/22/rails_on_only_jvm.html"/>
    <id>/2012/09/22/rails_on_only_jvm.html</id>
    <published>2012-09-22T00:00:00Z</published>
    <updated>2012-09-22T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;Imagine a scenario where an IT operations team is just comfortable with JVM. You also need to deliver a quick five day project and you know that Rails is just the right framework for it. But you do not have the luxury of installing Ruby or even Sqlite on the server.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Imagine a scenario where an IT operations team is just comfortable with JVM. You also need to deliver a quick five day project and you know that Rails is just the right framework for it. But you do not have the luxury of installing Ruby or even Sqlite on the server.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t worry you have JRuby to your resque. You can just ask IT to download the JRuby distribution and set the path to &amp;#8220;JRUBY_HOME&amp;#8221; and add &amp;#8220;$JRUBY_HOME/bin&amp;#8221; to the &amp;#8220;PATH&amp;#8221;. Tell them that at the end of the day its just a jar.&lt;/p&gt;

&lt;p&gt;Now, we need a DB that just runs on JVM, so we use &lt;a href='http://hsqldb.org/'&gt;http://hsqldb.org/&lt;/a&gt;. HSQLDB is a fast, ANSI-SQL comliant DB that runs on JVM.&lt;/p&gt;

&lt;p&gt;Unzip the downloaded HSQLDB distrib, and start the DB by the following command -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -cp /home/rockyj/Apps/hsqldb-2.2.9/hsqldb/lib/hsqldb.jar org.hsqldb.server.Server --database.0 file:dev --dbname.0 dev&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Change the classpath according to your machine. We have named this DB as &amp;#8220;dev&amp;#8221;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now for our Rails app, we can have the following Gemfile -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;#39;https://rubygems.org&amp;#39;

gem &amp;#39;rails&amp;#39;, &amp;#39;3.2.8&amp;#39;
gem &amp;#39;jquery-rails&amp;#39;
gem &amp;#39;anjlab-bootstrap-rails&amp;#39;, :require =&amp;gt; &amp;#39;bootstrap-rails&amp;#39;
gem &amp;#39;simple_form&amp;#39;

gem &amp;#39;activerecord-jdbchsqldb-adapter&amp;#39;, :git =&amp;gt; &amp;quot;https://github.com/jruby/activerecord-jdbc-adapter&amp;quot;
gem &amp;#39;jruby-openssl&amp;#39;
gem &amp;#39;puma&amp;#39;

group :assets do
  gem &amp;#39;sass-rails&amp;#39;,   &amp;#39;~&amp;gt; 3.2.3&amp;#39;
  gem &amp;#39;coffee-rails&amp;#39;, &amp;#39;~&amp;gt; 3.2.1&amp;#39;
  gem &amp;#39;uglifier&amp;#39;, &amp;#39;&amp;gt;= 1.0.3&amp;#39;
  gem &amp;#39;therubyrhino&amp;#39;
end

group :test, :development do
  gem &amp;#39;rspec-rails&amp;#39;, &amp;#39;~&amp;gt; 2.0&amp;#39;
end

group :test do
  gem &amp;#39;cucumber-rails&amp;#39;, :require =&amp;gt; false
  gem &amp;#39;database_cleaner&amp;#39;
  gem &amp;#39;factory_girl_rails&amp;#39;
  gem &amp;#39;launchy&amp;#39;
  gem &amp;#39;simplecov&amp;#39;
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main thing to note here is that we are using the master branch for &amp;#8216;activerecord-jdbchsqldb-adapter&amp;#8217; as we are using the latest version of HSQLDB server (all AR tests pass for HSQLDB on master with JRuby so we should be safe).&lt;/p&gt;

&lt;p&gt;Finally here is our database.yml -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;development:
  adapter: jdbc
  driver: org.hsqldb.jdbcDriver
  url: jdbc:hsqldb:hsql://localhost/dev
  username: SA
  password:&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use a similar setup for test and production DBs and we have a Rails app that needs nothing but a JVM to run. Problem solved!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Akka with JRuby</title>
    <link rel="alternate" href="/2012/09/15/akka_with_jruby.html"/>
    <id>/2012/09/15/akka_with_jruby.html</id>
    <published>2012-09-15T00:00:00Z</published>
    <updated>2012-09-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;This week I completed my work project and had a spare day to do some experimentation. I dabble sometimes with Scala which I think offers a cool combination of FP, OO and concurrency management. &lt;a href='http://akka.io'&gt;Akka&lt;/a&gt; is a middleware framework which works with Scala (and also Java) and provides an excellent abstraction to manage concurrency. Instead of dealing with threads, thread pools and low level synchronization we manage concurrency with something called as Actors.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;This week I completed my work project and had a spare day to do some experimentation. I dabble sometimes with Scala which I think offers a cool combination of FP, OO and concurrency management. &lt;a href='http://akka.io'&gt;Akka&lt;/a&gt; is a middleware framework which works with Scala (and also Java) and provides an excellent abstraction to manage concurrency. Instead of dealing with threads, thread pools and low level synchronization we manage concurrency with something called as Actors.&lt;/p&gt;

&lt;p&gt;From Akka&amp;#8217;s site - &amp;#8220;Actors are objects which encapsulate state and behavior, they communicate exclusively by exchanging messages which are placed into the recipientâ€™s mailbox. In a sense, actors are the most stringent form of object-oriented programming, but it serves better to view them as &lt;strong&gt;persons&lt;/strong&gt;: while modeling a solution with actors, envision a group of people and assign sub-tasks to them, arrange their functions into an organizational structure and think about how to escalate failure (all with the benefit of not actually dealing with people, which means that we need not concern ourselves with their emotional state or moral issues). The result can then serve as a mental scaffolding for building the software implementation&amp;#8221;.&lt;/p&gt;

&lt;p&gt;I think this is a great abstraction, dealing with people rather than threads :). To understand more about Akka see &lt;a href='http://www.slideshare.net/jboner/introducing-akka'&gt;this presentation here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my last blog, I talked about the advantages of using threads and the performace boost they give. I also warned about proper concurrency management when introducing threads to an application. If you need concurrency on a JRuby platform, Akka should be able to help you. After all anything that works on JVM should work on JRuby as well.&lt;/p&gt;

&lt;p&gt;With this in mind I wrote a simple &amp;#8220;Hello World&amp;#8221; in JRuby and Akka. To make this work, download the Akka distribution, create a folder and copy the following jars from the downloaded Akka ditribution in it -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;akka-actor-xx.jar&lt;/li&gt;

&lt;li&gt;config-xx.jar&lt;/li&gt;

&lt;li&gt;scala-library.jar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the same folder create &lt;strong&gt;hello.rb&lt;/strong&gt; like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;java&amp;#39;
require &amp;#39;scala-library.jar&amp;#39;
require &amp;#39;config-0.3.1.jar&amp;#39;
require &amp;#39;akka-actor-2.0.3.jar&amp;#39;

java_import &amp;#39;java.io.Serializable&amp;#39;
java_import &amp;#39;akka.actor.UntypedActor&amp;#39;
java_import &amp;#39;akka.actor.ActorRef&amp;#39;
java_import &amp;#39;akka.actor.ActorSystem&amp;#39;
java_import &amp;#39;akka.actor.Props&amp;#39;

class Greeting 
  include Serializable
  
  attr_reader :who

  def initialize(who)
    @who = who
  end
end
 
class GreetingActor &amp;lt; UntypedActor
  class &amp;lt;&amp;lt; self
    alias_method :apply, :new
    alias_method :create, :new
  end

  def onReceive(message)
    puts &amp;quot;Hello &amp;quot; + message.who;
  end
end
 
system = ActorSystem.create(&amp;quot;GreetingSystem&amp;quot;);
props = Props.new(GreetingActor)
greeter = system.actorOf(props, &amp;quot;greeter&amp;quot;);
greeter.tell(Greeting.new(&amp;quot;Rocky Jaiswal&amp;quot;));

system.shutdown
system.await_termination&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is dead simple code, we create an Actor (GreetingActor) by extending &lt;strong&gt;UnTypedActor&lt;/strong&gt; class, provided it an onReceive method which will receive messages, we created an Actor system, setup an Actor and passed it a message and voila we have a &amp;#8220;Hello World&amp;#8221; Akka program.&lt;/p&gt;

&lt;p&gt;Now if you want to do this in a more &amp;#8220;Ruby&amp;#8221; way, there is an excellent lightweight Ruby wrapper around Akka called &lt;a href='https://github.com/iconara/mikka'&gt;Mikka&lt;/a&gt; which will make your life a lot easier. Since I wanted to learn the API more, I did it in the more &amp;#8220;close to the metal&amp;#8221; way (sorry bad joke).&lt;/p&gt;

&lt;p&gt;Now for something more interesting and complicated. For this we will again look at the Akka site &lt;a href='http://doc.akka.io/docs/akka/2.0.1/intro/getting-started-first-java.html'&gt;here&lt;/a&gt; and calculate &amp;#8220;Pi&amp;#8221; with JRuby and Akka. Sounds exciting doesn&amp;#8217;t it.&lt;/p&gt;

&lt;p&gt;The formula we will use is -&lt;/p&gt;

&lt;p&gt;&lt;img alt='Pi calculation formula' src='/images/pi-formula.png' /&gt;&lt;/p&gt;

&lt;p&gt;This is splittable so that we can create multiple chunks like (1, -1/3, 1/5) and (-1/7, 1/9, -1/11) and so on where each chunk has a number of elements (three in the example above). As these chunks are individually calculated we just sum up their results.&lt;/p&gt;

&lt;p&gt;To work up the CPU and to get better results our number of chunks can be as high as ten thousand and each chunk can have ten thousand elements. You can go even higher if you want.&lt;/p&gt;

&lt;p&gt;Now we need to setup an Actor system where each worker applies the function to the elements of its chunk and reports back with the results. Depending on your CPU we can create &amp;#8220;n&amp;#8221; number of workers. We can then assign the chunks to the workers one by one.&lt;/p&gt;

&lt;p&gt;Finally when the Master has finished calculating the sum of the results reported by the workers it can notify another Actor that the value of Pi has been calculated.&lt;/p&gt;

&lt;p&gt;So we have three Actors now, the Master or the supervisor Actor, the Worker Actor and finally a Listener Actor which is notified of the final result.&lt;/p&gt;

&lt;p&gt;The Master Actor can recieve two types of messages, a &amp;#8220;calculate&amp;#8221; message which is an indication to commence the calculations and a &amp;#8220;result&amp;#8221; message which is a wrapper around the result calculated by a worker.&lt;/p&gt;

&lt;p&gt;Now let us see the program &lt;strong&gt;pi.rb&lt;/strong&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;java&amp;#39;
require &amp;#39;scala-library.jar&amp;#39;
require &amp;#39;config-0.3.1.jar&amp;#39;
require &amp;#39;akka-actor-2.0.3.jar&amp;#39;

java_import &amp;#39;java.io.Serializable&amp;#39;
java_import &amp;#39;akka.actor.UntypedActor&amp;#39;
java_import &amp;#39;akka.actor.ActorRef&amp;#39;
java_import &amp;#39;akka.actor.ActorSystem&amp;#39;
java_import &amp;#39;akka.actor.UntypedActorFactory&amp;#39;
java_import &amp;#39;akka.routing.RoundRobinRouter&amp;#39;
java_import &amp;#39;akka.actor.Props&amp;#39;
java_import &amp;#39;java.lang.System&amp;#39;
java_import &amp;#39;akka.util.Duration&amp;#39;
java_import &amp;#39;java.util.concurrent.TimeUnit&amp;#39;

#Wrapper for a calculate message
class Calculate
end

#Wrapper for a work unit
class Work 
  attr_reader :start, :no_of_elements

  def initialize(start, no_of_elements)
    @start = start
    @no_of_elements = no_of_elements
  end
end

#Wrapper for result
class Result 
  attr_reader :value

  def initialize(value)
    @value = value
  end
end

#Wrapper for final result
class PiApproximation
  attr_reader :pi, :duration

  def initialize(pi, duration)
    @pi = pi
    @duration = duration
  end
end

#The Worker
class Worker &amp;lt; UntypedActor
  class &amp;lt;&amp;lt; self
    alias_method :apply, :new
    alias_method :create, :new
  end

  def calculate_for_pi(start, no_of_elements)
    acc = 0.0
    start_elem = start * no_of_elements
    end_elem = (start + 1) * no_of_elements - 1

    (start_elem..end_elem).each do |elem|
      acc = acc + (4.0 * (1 - (elem % 2) * 2) / (2 * elem + 1))
    end
    
    return acc
  end

  def onReceive(work)
    result = calculate_for_pi(work.start, work.no_of_elements)
    getSender().tell(Result.new(result), get_self)
  end
end

#Master
class Master &amp;lt; UntypedActor
  attr_accessor :start, :no_of_workers, :no_of_chunks, :no_of_elements, :listener, :pi, :no_of_results
  
  class &amp;lt;&amp;lt; self
    alias_method :apply, :new
    alias_method :create, :new
  end

  def init_worker
    props = Props.new(Worker).withRouter(RoundRobinRouter.new(no_of_workers))
    @worker_router = self.get_context.actorOf(props, &amp;quot;workerRouter&amp;quot;)
  end

  def onReceive(message)
    if (message.is_a?(Calculate))
      (0...@no_of_chunks).each do |number|
        @worker_router.tell(Work.new(number, @no_of_elements), get_self)
      end
    else
      result = message
      @pi = @pi + result.value
      @no_of_results = @no_of_results + 1

      if (@no_of_results == @no_of_chunks)
        duration = Duration.create(System.currentTimeMillis - @start, TimeUnit::MILLISECONDS)
        @listener.tell(PiApproximation.new(@pi, duration), get_self)
        get_context.stop(get_self)
      end
    end
  end
end

class Listener &amp;lt; UntypedActor
  class &amp;lt;&amp;lt; self
    alias_method :apply, :new
    alias_method :create, :new
  end

  def onReceive(message)
    puts &amp;quot;Value of Pi - &amp;quot; + message.pi.to_s
    puts &amp;quot;Duration of calculation - &amp;quot; + message.duration.to_s

    get_context.system.shutdown
    #get_context.system.await_termination
  end
end

class MasterFactory 
  include UntypedActorFactory

  def initialize(listener)
    @@listener = listener
  end

  def create
    self.class.create
  end

  def self.create
    master = Master.new
    master.no_of_workers = 8
    master.no_of_chunks = 10000
    master.no_of_elements = 10000
    master.listener = @@listener
    master.start = System.currentTimeMillis
    master.pi = 0
    master.no_of_results = 0
    master.init_worker
    return master
  end
end


system = ActorSystem.create(&amp;quot;PiSystem&amp;quot;)
listener = system.actorOf(Props.new(Listener), &amp;quot;listener&amp;quot;)

props_2 = Props.new(MasterFactory.new(listener))
master = system.actorOf(props_2, &amp;quot;master&amp;quot;)
master.tell(Calculate.new)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you read my explanation above this code is simple to understand, there is a minor hack or two to make Akka work on JRuby but most of this is self explanatory.&lt;/p&gt;

&lt;p&gt;We can run this and see the output -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jruby pi.rb 
Value of Pi - 3.1415926435897883
Duration of calculation - 5039 milliseconds&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally lets see the effect this has on my i7 CPU&lt;/p&gt;

&lt;p&gt;&lt;img alt='akka cpu effect' src='/images/akka_cpu_effect.png' /&gt;&lt;/p&gt;

&lt;p&gt;As you can see all 8 virtual cores on the i7 CPU have been used with utilization close to 100% at the time the program ran. I think my experiment is successful, sorry for the longish post, I hope you had as much fun reading it as I had making it. Code shown above is available &lt;a href='https://github.com/rocky-jaiswal/akka-experiment'&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Running Rails on Ruby or JRuby - A Performance Comparison</title>
    <link rel="alternate" href="/2012/09/09/rails_on_ruby_jruby_a_performance_comparison.html"/>
    <id>/2012/09/09/rails_on_ruby_jruby_a_performance_comparison.html</id>
    <published>2012-09-09T00:00:00Z</published>
    <updated>2012-09-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I have been a JRuby fanboy for a while now, in the last few weeks I also saw some really interesting RailsCasts on multi-threading Rails applications and JRuby which piqued me to do some ad-hoc experimentation. I recommend everyone to watch these three episodes -&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I have been a JRuby fanboy for a while now, in the last few weeks I also saw some really interesting RailsCasts on multi-threading Rails applications and JRuby which piqued me to do some ad-hoc experimentation. I recommend everyone to watch these three episodes -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://railscasts.com/episodes/365-thread-safety'&gt;http://railscasts.com/episodes/365-thread-safety&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://railscasts.com/episodes/376-jruby-basics'&gt;http://railscasts.com/episodes/376-jruby-basics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://railscasts.com/episodes/377-trinidad'&gt;http://railscasts.com/episodes/377-trinidad&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I am a sucker for performance. I love making performance improvements on applications. So I thought let me run some tests on a simple Rails application on my personal laptop (i7, 8 GB RAM, SSD) and see how well the Ruby implementations and their commonly used servers fare. I will use MRI 1.9.3, JRuby 1.7.0.preview2 and the latest app servers for this experiment.&lt;/p&gt;

&lt;p&gt;These tests need to be taken with a pinch of salt as I am no authority in perfomance testing but still the results are quite interesting.&lt;/p&gt;

&lt;p&gt;First, we need to setup a Rails app which can be used with both Ruby and JRuby. My Gemfile looks like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;#39;https://rubygems.org&amp;#39;

gem &amp;#39;rails&amp;#39;, &amp;#39;3.2.8&amp;#39;
gem &amp;#39;warbler&amp;#39;

platform :jruby do
  gem &amp;#39;activerecord-jdbcpostgresql-adapter&amp;#39;
  gem &amp;#39;jruby-openssl&amp;#39;
  gem &amp;#39;puma&amp;#39;
  gem &amp;#39;trinidad&amp;#39;
  gem &amp;#39;therubyrhino&amp;#39;, group: :assets
end

platform :ruby do
  gem &amp;#39;pg&amp;#39;
  gem &amp;#39;unicorn&amp;#39;
end

# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem &amp;#39;sass-rails&amp;#39;,   &amp;#39;~&amp;gt; 3.2.3&amp;#39;
  gem &amp;#39;coffee-rails&amp;#39;, &amp;#39;~&amp;gt; 3.2.1&amp;#39;
  gem &amp;#39;uglifier&amp;#39;, &amp;#39;&amp;gt;= 1.0.3&amp;#39;
end

gem &amp;#39;jquery-rails&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing out of the ordinary here, only thing is that the gems will be loaded according to the Ruby implementation.&lt;/p&gt;

&lt;p&gt;I also scaffolded a generic User model and added a few records to my database. Pointed the &amp;#8216;root&amp;#8217; of my application to the /users/index page so that the DB is hit everytime someone opens the homepage of the application. I will also use &amp;#8220;ab&amp;#8221; (apache benchmark) as my testing tool, I also tried this with JMeter and there was not much difference. My command is -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab -n 100 -c 10 http://localhost:8080/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means my app&amp;#8217;s homepage will be hit by 100 requests with 10 concurrent requests at a time, decent enough for performance testing a small app.&lt;/p&gt;

&lt;p&gt;Now lets start the experiment. We will run the experiment on the server in 2 modes, one by not allowing concurrency and the other by allowing concurrency. See tenderlove&amp;#8217;s awesome post to understand this more - &lt;a href='http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html'&gt;http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html&lt;/a&gt;. This is done by commenting / uncommenting this line in production.rb -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.threadsafe!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will also run the &amp;#8220;ab&amp;#8221; command above a few times so that cache etc is warmed. The results you see below are always for the 5th or 6th run.&lt;/p&gt;

&lt;p&gt;Also, we will precompile our assets and serve them from the app server only. We will run the tests in production mode. I have also increased the DB pool size to 15 so that no bottleneck is created there.&lt;/p&gt;

&lt;p&gt;Finally, we kick off our experiment with MRI 1.9.3, Unicorn, 3 workers enabled and concurrency off. Let&amp;#8217;s see the results -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RAILS_ENV=production bundle exec unicorn -c config/unicorn.rb

Requests per second:    549.31 [#/sec] (mean)
Time per request:       18.205 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets us allow concurrency (uncomment the &amp;#8220;config.threadsafe!&amp;#8221; line) and re-run the tests -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    525.78 [#/sec] (mean)
Time per request:       19.019 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not much of a difference. This is because MRI uses a GIL and there is no thread level concurrency in MRI. Also reducing the no of workers reduces the performance drastically, if I use 1 worker -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    109.46 [#/sec] (mean)
Time per request:       91.360 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s switch over to JRuby now and use &lt;a href='http://puma.io'&gt;puma&lt;/a&gt; as the server, with these JVM options -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export JRUBY_OPTS=&amp;quot;-J-XX:ReservedCodeCacheSize=100m -J-Xmn512m -J-Xms2048m -J-Xmx2048m -J-server&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Server can be started by -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RAILS_ENV=production jruby -S bundle exec puma -p 8080&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Results with concurrency off -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    72.37 [#/sec] (mean)
Time per request:       138.184 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is much much slower than Unicorn.&lt;/p&gt;

&lt;p&gt;Lets enable concurrency and retest -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    451.77 [#/sec] (mean)
Time per request:       22.135 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we see a huge performance boost, we are getting similar results as Unicorn even though we are running just one server process as opposed to Unicorn&amp;#8217;s three. One can imagine the performance for a clustered puma setup.&lt;/p&gt;

&lt;p&gt;Lets try the same tests with &lt;a href='http://thinkincode.net/trinidad/'&gt;Trinidad&lt;/a&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RAILS_ENV=production jruby -S bundle exec trinidad -p 8080&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Results with concurrency off -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    287.45 [#/sec] (mean)
Time per request:       34.788 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a bit slow, lets enable concurrency and retest -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    391.74 [#/sec] (mean)
Time per request:       25.527 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see an improvment now. Although, Puma is a tad faster (ignorable).&lt;/p&gt;

&lt;p&gt;Lastly with we will use the warbler gem to generate a war file and deploy it on standard tomcat with concurrency enabled -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    241.42 [#/sec] (mean)
Time per request:       41.422 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These numbers are a bit higher than Puma and Trinidad.&lt;/p&gt;

&lt;p&gt;Finally, here is a summary -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unicorn is fast and performance improves as the number of workers are increased (no surprise!!).&lt;/li&gt;

&lt;li&gt;There is no effect of enabling concurrency on Unicorn as MRI uses GIL (Global Interpreter Lock).&lt;/li&gt;

&lt;li&gt;When using Unicorn you don&amp;#8217;t have to worry about multithreading.&lt;/li&gt;

&lt;li&gt;Puma is fast but only when concurrency is enabled.&lt;/li&gt;

&lt;li&gt;Trinidad is almost as fast as Puma.&lt;/li&gt;

&lt;li&gt;A cluster of JRuby optimized servers (Puma / Trinidad) will be lightining fast.&lt;/li&gt;

&lt;li&gt;On JRuby servers the response time improves steadily as the server is hit due to JVM optimizations kicking in.&lt;/li&gt;

&lt;li&gt;With concurrency enabled on Puma / Trinidad watch out for thread safety.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I missed testing JRuby with Torquebox which is also a great JRuby server. Maybe I will update the blog later.&lt;/p&gt;

&lt;p&gt;Also, with JVM / JRuby / multi-threading, there is big advantage of running jobs in background threads without relying on external processes.&lt;/p&gt;

&lt;p&gt;However, with multi-threading enabled, thread safety may be hard to get right. If you have a simple application and you design the application with concurrency in mind (immutable classes, thread safe libraries) then go ahead and use JRuby with Puma / Trinidad / Torquebox. Learn more from a great post here -&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/jruby/jruby/wiki/Concurrency-in-jruby'&gt;https://github.com/jruby/jruby/wiki/Concurrency-in-jruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Errata (10-Sep) :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Earlier I tested tomcat with the path http://localhost:8080/testy, this did not hit the application as expected and I reported some wrong numbers. I am really sorry for the error, the url should have been http://localhost:8080/testy/ (with a slash at the end). The numbers / findings have now been updated. Big thanks to Ben Browning and Richard Huang!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update for Torquebox (11-Sep):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ben Browning (the creator of &lt;a href='http://torquebox.org'&gt;Torquebox&lt;/a&gt;) suggested that I try these tests on (yet unreleased) torquebox-lite. We just need to add &amp;#8216;torquebox-lite&amp;#8217; to our Gemfile for this. I got an error after this but I easily fixed it by adding the line &lt;strong&gt;xa: false&lt;/strong&gt; to my production database.yml config (as we are running the tests on production mode). More info on this here - &lt;a href='http://torquebox.org/documentation/2.1.1/transactions.html#transaction-configuration'&gt;http://torquebox.org/documentation/2.1.1/transactions.html#transaction-configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First with concurrency disabled, let us start a torquebox-lite instance with three runtimes with this simple command -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RAILS_ENV=production jruby -S bundle exec torquebox-lite -p 8080 --min-runtimes=3 --max-runtimes=3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even with consurrency disabled, the numbers here are quite good (although memory consumption is slightly on the higher side due to 3 runtimes and JBoss being a bit heavy) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    258.86 [#/sec] (mean)
Time per request:       38.631 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally with concurrency enabled and a single torquebox runtime we get -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Requests per second:    478.19 [#/sec] (mean)
Time per request:       20.912 [ms] (mean)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The numbers match or are slightly better than Puma and drop even further as the JVM is warmed. For me, this makes a compelling case for using torquebox / torquebox-lite in production. Torquebox has a rock solid base of JBoss with great performance not to mention other awesome Torquebox features which you can see from my earlier blogs / &lt;a href='http://localhost:4567/2012/03/26/ruby_conf_india_with_arunagw.html'&gt;slideshare&lt;/a&gt; presentation.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Deploying Java applications with Capistrano</title>
    <link rel="alternate" href="/2012/09/01/deploying_java_apps_with_capistrano.html"/>
    <id>/2012/09/01/deploying_java_apps_with_capistrano.html</id>
    <published>2012-09-01T00:00:00Z</published>
    <updated>2012-09-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;The advantage of learning a few programming languages is that you apply one&amp;#8217;s paradigms to the other. When I was a Java programmer I never gave much thought to deployment. Maven would build a war file, which would be copied to the application server through a shell script or even via the IDE. For remote deployments we would just do the same from the build server via scp. I always found the Maven &amp;#8220;Cargo&amp;#8221; plugin too complicated so let just skip that for now.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;The advantage of learning a few programming languages is that you apply one&amp;#8217;s paradigms to the other. When I was a Java programmer I never gave much thought to deployment. Maven would build a war file, which would be copied to the application server through a shell script or even via the IDE. For remote deployments we would just do the same from the build server via scp. I always found the Maven &amp;#8220;Cargo&amp;#8221; plugin too complicated so let just skip that for now.&lt;/p&gt;

&lt;p&gt;Then I came into the Ruby world and learned (a bit) about Capistrano and was absolutely fascinated by it. It did so much so easily for deployment that using anything else seems pre-historic.&lt;/p&gt;

&lt;p&gt;So I started suggesting my Java friends to use Capistrano. This post is my first attempt at deploying a Java EE6 project with Capistrano.&lt;/p&gt;

&lt;p&gt;Lets start by creating a Java EE6 project from Maven (or whichever way you like). To keep our lives simple and stay withing the JVM world we will use JRuby (1.7.0 preview 2). If you already have JRuby setup run a &amp;#8220;gem update&amp;#8221; to avoid any pain.&lt;/p&gt;

&lt;p&gt;Now just install the Capistrano gem in JRuby by running -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install capistrano&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in the root directory of our JavaEE project run -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;capify .&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Capistrano will now create some files with some default entries.&lt;/p&gt;

&lt;p&gt;Now, we will also use the Tomcat Manager for deployment so read up a bit &lt;a href='http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html'&gt;here&lt;/a&gt; and setup your manager in $TOMCAT_HOME/conf/tomcat-users.xml. Make sure you give the manager &lt;strong&gt;&amp;#8220;manager-script&amp;#8221;&lt;/strong&gt; role so that we can do automated command line deployments through the manager.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll start of by using Capistrano for local deployment, I know that can be easily done through an IDE but we&amp;#8217;ll start off with this and for doing remote deployments it will be just a matter of changing the hostname and paths (and SSH setup of course).&lt;/p&gt;

&lt;p&gt;So lets look at the capfile we update in $your-javaee-project/config/deploy.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set :application, &amp;quot;jdeployer&amp;quot;
set :scm, &amp;quot;git&amp;quot;
set :repository, &amp;quot;git@github.com:rocky-jaiswal/#{application}.git&amp;quot;
set :branch, &amp;quot;master&amp;quot;

default_run_options[:pty] = true
ssh_options[:forward_agent] = true #Line 7

task :local do
    roles.clear
    server &amp;quot;localhost&amp;quot;, :app #Line 11
    set :user, &amp;quot;rockyj&amp;quot; 
    set :java_home, &amp;quot;/home/#{user}/jdk1.7.0_05&amp;quot; #Line 13
    set :tomcat_home, &amp;quot;/home/#{user}/Apps/apache-tomcat-7.0.29&amp;quot;
    set :tomcat_manager, &amp;quot;manager&amp;quot;
    set :tomcat_manager_password, &amp;quot;manager&amp;quot;
    set :maven_home, &amp;quot;/home/#{user}/Apps/apache-maven-3.0.4&amp;quot;
    set :deploy_to, &amp;quot;/home/#{user}/tmp/#{application}&amp;quot; # Line 18
    set :use_sudo, false
    namespace :tomcat do
      task :deploy do
        puts &amp;quot;==================Building with Maven======================&amp;quot; #Line 22
        run &amp;quot;export JAVA_HOME=#{java_home} &amp;amp;&amp;amp; cd #{deploy_to}/current &amp;amp;&amp;amp; #{maven_home}/bin/mvn clean package&amp;quot;
        puts &amp;quot;==================Undeploy war======================&amp;quot;#Line 24
        run &amp;quot;curl --user #{tomcat_manager}:#{tomcat_manager_password} http://$CAPISTRANO:HOST$:8080/manager/text/undeploy?path=/#{application}&amp;quot;
        puts &amp;quot;==================Deploy war to Tomcat======================&amp;quot; #Line 26
        run &amp;quot;curl --upload-file #{deploy_to}/current/target/#{application}*.war --user #{tomcat_manager}:#{tomcat_manager_password} http://$CAPISTRANO:HOST$:8080/manager/text/deploy?path=/#{application}&amp;quot;
      end
    end
    after &amp;quot;deploy&amp;quot;, &amp;quot;tomcat:deploy&amp;quot; #Line 30
    after &amp;quot;tomcat:deploy&amp;quot;, &amp;quot;deploy:cleanup&amp;quot; # keep only the last 5 releases
end &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Line 1 - 7 : We are using github as our code repo and the first 7 lines are basic Capistrano setup (nothing much to talk about).&lt;/p&gt;

&lt;p&gt;Line 11 - 18 : Then we define a custom task / namespace to keep our experiment isolated. We set the Java, Tomcat and other paths to get the basic setup in place. We will also use Maven to build our app so we specify its path as well. We will build the app in a temporary folder so we set that path as well.&lt;/p&gt;

&lt;p&gt;Line 30 : The default Capistrano task is &amp;#8220;deploy&amp;#8221; which will take the updated version of code from git check it out in the specified directory. After the deploy command we will run our own custom commands through Capistrano&amp;#8217;s DSL.&lt;/p&gt;

&lt;p&gt;Line 22 - 23 : Now we start using Capistrano&amp;#8217;s DSL and run commands on remote servers via ssh. First we set the right JAVA_HOME and change the directory to where our code is. Then we build our project through Maven. Please note we need to run the commands in the same shell and that is why we do &amp;#8220;command a &amp;amp;&amp;amp; command b&amp;#8221;. We cannot specify commands in separate lines as Capistrano opens a new shell for each command when we run it with the &amp;#8220;run&amp;#8221; method call.&lt;/p&gt;

&lt;p&gt;Line 24 - 27 : Next using the Tomcat manager and curl (since Tomcat Manager works on HTTP), we undeploy the existing version of the application and finally deploy the Maven built new version. We use the &amp;#8220;$CAPISTRANO:HOST&amp;#8221; variable to avoid hardcoding and getting the hostname where Capistrano commands are being run.&lt;/p&gt;

&lt;p&gt;We will first test this on localhost, so make sure you have your local ssh server running. In Fedora I do -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service sshd start&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, make sure you have local SSH keys setup and your Tomcat is running with the manager properly configured. Now finally run this single command to deploy your Java application -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cap local deploy&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is it, since the build is made from github make sure you push your changes out before running this command to see your changes on the browser. This may seem a lot for a local deploy but now just change the &amp;#8220;:server&amp;#8221; hostname to deploy to a server remotely (ofcourse, you may need to change your Maven / JDK paths as well according to your remote server setup). After this you can now deploy a new &amp;#8220;war&amp;#8221; build to a remote server with a single command. You can also write your own custom tasks with Capistrano and sit back and enjoy painless deployments.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Accessing server data from a native Android app</title>
    <link rel="alternate" href="/2012/08/26/accessing_server_data_from_a_native_android_app.html"/>
    <id>/2012/08/26/accessing_server_data_from_a_native_android_app.html</id>
    <published>2012-08-26T00:00:00Z</published>
    <updated>2012-08-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;This was a quite relaxing weekend, there was heavy rain in the Delhi region so there was not much to do. So I picked up a Scala book and read a few chapters. Soon enough, my hands started itching to write some code. I wanted to build something in Scala but ended up experimenting on Android.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;This was a quite relaxing weekend, there was heavy rain in the Delhi region so there was not much to do. So I picked up a Scala book and read a few chapters. Soon enough, my hands started itching to write some code. I wanted to build something in Scala but ended up experimenting on Android.&lt;/p&gt;

&lt;p&gt;Back at work, I finished my first iPad optimized jQuery Mobile and Rails web application. I am mostly satisfied with the end result but somehow felt that a native app would have provided a better experience to the user. The question which arises is how to make a native app communicate with the server when most of the data needs to be fetched from the server itself.&lt;/p&gt;

&lt;p&gt;So to build on this idea, I started making an Android application that fetches JSON data from a Rails server. To express myself clearly I wanted data to be accessible from a mobile app and a web app, like shown below -&lt;/p&gt;

&lt;p&gt;&lt;img alt='Mobile' src='/images/mobby_mobile.png' /&gt; &lt;img alt='Mobile' src='/images/mobby_web.png' /&gt;&lt;/p&gt;

&lt;p&gt;The web app is a fully featured Mongoid enabled Rails application for which I have scaffoled a simple book model. I wanted the mobile version to also access the same data (in JSON format) and just display it in a Phonegapped native application. You can already see the end result in the images above. Lets look at the steps required to build this -&lt;/p&gt;

&lt;p&gt;The first and the biggest problem you are bound to face is -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XMLHttpRequest cannot load http://localhost:3000/books.json. Origin null is not allowed by Access-Control-Allow-Origin.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because the Android application is not running on the same server as the Rails application in fact it is not running on any server at all. Rails will interpret the incoming request and reject it as it assumes it is from a malicious source (remember CSRF).&lt;/p&gt;

&lt;p&gt;To solves this problem we have to use &lt;a href='http://en.wikipedia.org/wiki/JSONP'&gt;JSONP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To organize our mobile application&amp;#8217;s JavaScript code we will use Backbone.js. Here is how the code looks like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Mobby&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/jquery-1.7.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/cordova-2.0.0.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/underscore.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/backbone.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/libs/bootstrap.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/plugins.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap-responsive.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/style.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;div class=&amp;quot;navbar navbar-fixed-top&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;navbar-inner&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
            &amp;lt;a class=&amp;quot;brand&amp;quot; href=&amp;quot;/&amp;quot;&amp;gt;Mobby&amp;lt;/a&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot; style=&amp;quot;padding-top: 50px&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Books&amp;lt;/p&amp;gt;
      &amp;lt;div id=&amp;quot;book&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; type=&amp;quot;button&amp;quot; id=&amp;quot;btnRefresh&amp;quot; style=&amp;quot;margin-top: 20px&amp;quot;&amp;gt;Refresh&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the JS code -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function(){

  var Book = Backbone.Model.extend({
  });

  var BookList = Backbone.Collection.extend({
    model : Book, 
    url: &amp;#39;http://10.0.2.2:3000/books.jsonp?callback=?&amp;#39;, //Line 9
    parse: function(response) {
      return response;
    }
  });

  var books = new BookList();
  books.fetch();

  var BookView = Backbone.View.extend({
    el : $(&amp;#39;#book&amp;#39;),
    render: function() {
      var bookList = &amp;#39;&amp;lt;ui&amp;gt;&amp;#39;;
      _.each(this.model.models, function(book){
        bookList = bookList + &amp;#39;&amp;lt;li&amp;gt;&amp;#39; + book.get(&amp;#39;title&amp;#39;) + &amp;#39;&amp;lt;\/li&amp;gt;&amp;#39;;
      });
      bookList = bookList + &amp;#39;&amp;lt;\/ul&amp;gt;&amp;#39;;
      $(this.el).html(bookList);
      return this;
    }
  });

  books.on(&amp;quot;reset&amp;quot;, function() {
    var view = new BookView({model: books});
    view.render();
  });

  $(&amp;quot;#btnRefresh&amp;quot;).click(function() {
    books.fetch();
  });

  // Wait for Cordova to load
  document.addEventListener(&amp;quot;deviceready&amp;quot;, onDeviceReady, false);

  // Cordova is loaded and it is now safe to make calls Cordova methods
  function onDeviceReady() {
  }

});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is standard Backbone stuff, see my &lt;a href='/2012/05/25/intro_to_backbone_jQuery.html'&gt;older&lt;/a&gt; post to get an introduction to Backbone.&lt;/p&gt;

&lt;p&gt;The important thing is on Line number 9. We are doing 2 things there, firstly using &lt;strong&gt;10.0.2.2&lt;/strong&gt; instead of &lt;strong&gt;localhost&lt;/strong&gt; beause that is how the emulator can access the host machine where the Rails server is running. Secondly, we are not doing a simple JSON request to the Rails server but doing a JSONP request.&lt;/p&gt;

&lt;p&gt;Now, on the Rails side to need to deal with this new type to request and also wrap JSON back in a callback. Doing so for every individual request can be a pain but fear not there is a Gem available for this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;#39;rack-jsonp-middleware&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the name suggests, this is a Rails middleware (consider it as a request filter if you are from the Java world) and to enable it we need to add this in application.rb -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.middleware.use Rack::JSONP&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our controller is untouched now -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# GET /books
# GET /books.json
def index
  @books = Book.all

  respond_to do |format|
    format.html # index.html.erb
    format.json { render json: @books }
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rest of the magic is all on Backbone&amp;#8217;s side. Now if we make a change on the web application and hit the &amp;#8220;Refesh&amp;#8221; button on the mobile application we will get the updated data on the mobile view.&lt;/p&gt;

&lt;p&gt;In my next blog (hopefully) I will cover editing of data on the mobile even when you are offline with eventual sync to the server and using &amp;#8220;Cross-origin Resource Sharing&amp;#8221; which is an essential security feature when accessing site data from multiple interfaces.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Why JavaScript is important</title>
    <link rel="alternate" href="/2012/08/18/why_javascript_is_important.html"/>
    <id>/2012/08/18/why_javascript_is_important.html</id>
    <published>2012-08-18T00:00:00Z</published>
    <updated>2012-08-18T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;In a couple of months I will be completing a decade professionally in the IT / ICT field. Its been a great journey and I have much to learn. I am happy that I have been able to stick to technology and my love for programming increases each day. I have also seen a lot of technologies come and go in these years, some have been surprisingly pleasantly and some have left a bad taste in the mouth.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;In a couple of months I will be completing a decade professionally in the IT / ICT field. Its been a great journey and I have much to learn. I am happy that I have been able to stick to technology and my love for programming increases each day. I have also seen a lot of technologies come and go in these years, some have been surprisingly pleasantly and some have left a bad taste in the mouth.&lt;/p&gt;

&lt;p&gt;Java was the first language that I really understood and appreciated. It&amp;#8217;s statically typed, complied to a bytecode and offers great performance second only to C. With Java I felt that there were hundreds of ways to tweak things, you could start threads from a thread pool, synchronize them with locks when are where you wished. But with this great power also came great repossibilty, one had to spend time to understand concurrency, thread safety and most of the times these important aspects were ignored. Java still is a great language and the JVM is still the place to go when you are looking for stability and performance.&lt;/p&gt;

&lt;p&gt;Then I learned Rails, this was the complete opposite of Java. Built on a dynamic, meta-programming-happy language - Ruby, it offered one and only one way to build app. This was a good thing and bad. Good because the design decisions Rails took were (and still are) great. RESTful MVC architecture with a great ORM, there is nothing better really. Rails is THE framework to go if you want to build modern websites quickly and efficiently. Of course, Ruby isn&amp;#8217;t the fastest langauge on the planet, but it is improving and JRuby will kick ass in near future.&lt;/p&gt;

&lt;p&gt;Then came node.js and changed the way we develop websites. node.js is fast and by fast I mean blazing fast. node.js doesn&amp;#8217;t have threads and uses JavaScript fully to create a event-driven and asynchronous architecture. I have heard stories of two clustered node.js servers handling traffic of large dot coms. There are a lot of articles on the web which can help you with node.js but I want to emphasise on the point why every developer worth his / her salt needs to learn JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rise of mobile -&lt;/strong&gt; Every site now built needs a mobile version. As a result a lot of web applications will use Responsive Design and push logic on the client side. The server, I believe, will become a mere provider of data. I think this approach is also a decent design paradigm. The complex calculations can be done on server of course and the client only needs the processed JSON from server for a dynamic display. As the code on the client side increases one needs a framework to manage it or live with sphagetti JavaScript code, which is a maintenance hell.&lt;/p&gt;

&lt;p&gt;To organize code on the client side we need frameworks like Backbone.js, Ember.js and Angular.js. These framework require solid knowledge of JavaScript so irrespective of the server side technology JavaScript knowledge is a must.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Push is the future -&lt;/strong&gt; Modern sites are using Push more and more. Which means the user does not have to refresh the page to fetch new data, the server can &amp;#8220;push&amp;#8221; the data to the client. This requires use of HTML5&amp;#8217;s websockets. Node.js and socket.io are the best suited technologies for this (both of course are written in JavaScript). A single node.js instance due to its event driven and ansynchronous nature can push data to multiple client easily. This would not scale on a comparitively slower frameworks like Rails. Clojure, Scala and Vert.ex make push possible but none of them have been proven themseles so far like node.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript is everywhere -&lt;/strong&gt; There is only one technology to work with when working on the browser i.e. JavaScript. We all know MVC is great, wouldn&amp;#8217;t it be awesome if as soon as I change my model on server the client is updated (without the user hitting refresh), this requires two things - push of data from server and manipulation of UI on browser. Well, JavaScript is THE ONLY language that can do this things. Meteor.js is already making this possible and there are other frameworks in line (all on JavaScript).&lt;/p&gt;

&lt;p&gt;Well that is why I am not wasting any time improving my JavaScript.&lt;/p&gt;</content>
  </entry>
</feed>
